{"ast":null,"code":"import _defineProperty from \"/Desenv/BootCamp-GoStack/gostack-meetapp-frontend-master/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Desenv/BootCamp-GoStack/gostack-meetapp-frontend-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Desenv/BootCamp-GoStack/gostack-meetapp-frontend-master/src/pages/MeetupForm/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from '@rocketseat/unform';\nimport { parseISO } from 'date-fns';\nimport * as Yup from 'yup';\nimport { MdAddCircleOutline } from 'react-icons/md';\nimport { toast } from 'react-toastify';\nimport api from \"../../services/api\";\nimport history from \"../../services/history\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport BannerInput from './BannerInput';\nimport DatePicker from './DatePicker';\nimport { Container } from './styles';\nconst schema = Yup.object().shape({\n  banner_id: Yup.number().transform(value => !value ? undefined : value).required('O banner é obrigatório'),\n  name: Yup.string().required('O título é obrigatório'),\n  description: Yup.string(),\n  date: Yup.date().required('A data é obrigatória'),\n  location: Yup.string().required('A localização é obrigatória')\n});\nexport default function MeetupForm({\n  match\n}) {\n  const id = match.params.id;\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        meetup = _useState2[0],\n        setMeetup = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  useEffect(() => {\n    async function loadMeetup() {\n      setLoading(true);\n      const response = await api.get(\"meetups/\".concat(id));\n      const meetupInfo = response.data;\n      const parsedDate = parseISO(meetupInfo.date);\n\n      const data = _objectSpread({}, meetupInfo, {\n        date: parsedDate\n      });\n\n      setMeetup(data);\n      setLoading(false);\n    }\n\n    if (id) loadMeetup();\n  }, [id]);\n\n  async function handleSubmit(form) {\n    console.tron.log(id);\n    console.tron.log(form);\n\n    try {\n      if (id) await api.put(\"meetups/\".concat(id), form);else await api.post('meetups', form);\n      history.push('/dashboard');\n    } catch (err) {\n      toast.error('Erro ao executar ação, favor verificar seus dados!');\n    }\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, id && loading ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Carregando...\") : React.createElement(Form, {\n    initialData: meetup,\n    schema: schema,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(BannerInput, {\n    name: \"banner_id\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Input, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"T\\xEDtulo do Meetup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Input, {\n    multiline: true,\n    name: \"description\",\n    placeholder: \"Descri\\xE7\\xE3o completa\",\n    rows: \"5\",\n    defaultValue: meetup.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(DatePicker, {\n    name: \"date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(Input, {\n    type: \"text\",\n    name: \"location\",\n    placeholder: \"Localiza\\xE7\\xE3o\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(MdAddCircleOutline, {\n    size: 20,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Salvar meetup\"))));\n}\nMeetupForm.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/Desenv/BootCamp-GoStack/gostack-meetapp-frontend-master/src/pages/MeetupForm/index.js"],"names":["React","useState","useEffect","PropTypes","Form","Input","parseISO","Yup","MdAddCircleOutline","toast","api","history","BannerInput","DatePicker","Container","schema","object","shape","banner_id","number","transform","value","undefined","required","name","string","description","date","location","MeetupForm","match","id","params","meetup","setMeetup","loading","setLoading","loadMeetup","response","get","meetupInfo","data","parsedDate","handleSubmit","form","console","tron","log","put","post","push","err","error","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from '@rocketseat/unform';\nimport { parseISO } from 'date-fns';\nimport * as Yup from 'yup';\nimport { MdAddCircleOutline } from 'react-icons/md';\nimport { toast } from 'react-toastify';\nimport api from '~/services/api';\nimport history from '~/services/history';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport BannerInput from './BannerInput';\nimport DatePicker from './DatePicker';\n\nimport { Container } from './styles';\n\nconst schema = Yup.object().shape({\n  banner_id: Yup.number()\n    .transform(value => (!value ? undefined : value))\n    .required('O banner é obrigatório'),\n  name: Yup.string().required('O título é obrigatório'),\n  description: Yup.string(),\n  date: Yup.date().required('A data é obrigatória'),\n  location: Yup.string().required('A localização é obrigatória'),\n});\n\nexport default function MeetupForm({ match }) {\n  const { id } = match.params;\n  const [meetup, setMeetup] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function loadMeetup() {\n      setLoading(true);\n      const response = await api.get(`meetups/${id}`);\n      const meetupInfo = response.data;\n      const parsedDate = parseISO(meetupInfo.date);\n      const data = {\n        ...meetupInfo,\n        date: parsedDate,\n      };\n\n      setMeetup(data);\n      setLoading(false);\n    }\n\n    if (id) loadMeetup();\n  }, [id]);\n\n  async function handleSubmit(form) {\n    console.tron.log(id);\n    console.tron.log(form);\n    try {\n      if (id) await api.put(`meetups/${id}`, form);\n      else await api.post('meetups', form);\n\n      history.push('/dashboard');\n    } catch (err) {\n      toast.error('Erro ao executar ação, favor verificar seus dados!');\n    }\n  }\n\n  return (\n    <Container>\n      {id && loading ? (\n        <h1>Carregando...</h1>\n      ) : (\n        <Form initialData={meetup} schema={schema} onSubmit={handleSubmit}>\n          <BannerInput name=\"banner_id\" />\n          <Input type=\"text\" name=\"name\" placeholder=\"Título do Meetup\" />\n          <Input\n            multiline\n            name=\"description\"\n            placeholder=\"Descrição completa\"\n            rows=\"5\"\n            defaultValue={meetup.description}\n          />\n          <DatePicker name=\"date\" />\n          <Input type=\"text\" name=\"location\" placeholder=\"Localização\" />\n\n          <button type=\"submit\">\n            <MdAddCircleOutline size={20} color=\"#fff\" />\n            <span>Salvar meetup</span>\n          </button>\n        </Form>\n      )}\n    </Container>\n  );\n}\n\nMeetupForm.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}